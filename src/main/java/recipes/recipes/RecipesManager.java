package recipes.recipes;

import com.speedment.orm.config.model.Column;
import com.speedment.orm.config.model.Table;
import com.speedment.orm.core.manager.sql.SqlManager;
import com.speedment.orm.platform.Platform;
import com.speedment.orm.platform.component.ManagerComponent;
import com.speedment.orm.platform.component.ProjectComponent;
import java.lang.IllegalArgumentException;
import java.lang.Long;
import java.lang.String;
import javax.annotation.Generated;

/**
 * A manager representing an entity (for example, a row) in the Table 'project_1.recipes.recipes.recipes'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment.
 * Any changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment 
 */
@Generated("Speedment")
public interface RecipesManager extends SqlManager<Long, Recipes, RecipesBuilder> {
    
    @Override
    default Long primaryKeyFor(Recipes entity) {
        return entity.getId();
    }
    
    @Override
    default Table getTable() {
        return Platform.get().get(ProjectComponent.class).getProject().findTableByName("recipes.recipes.recipes");
    }
    
    @Override
    default Class<RecipesManager> getManagerClass() {
        return RecipesManager.class;
    }
    
    @Override
    default Class<Recipes> getEntityClass() {
        return Recipes.class;
    }
    
    @Override
    default Class<RecipesBuilder> getBuilderClass() {
        return RecipesBuilder.class;
    }
    
    @Override
    default Object get(Recipes entity, Column column) {
        switch (column.getName()) {
            case "id" : return entity.getId();
            case "name" : return entity.getName();
            case "text" : return entity.getText();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    default void set(RecipesBuilder entity, Column column, Object value) {
        switch (column.getName()) {
            case "id" : entity.setId((Long) value); break;
            case "name" : entity.setName((String) value); break;
            case "text" : entity.setText((String) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @SuppressWarnings("unchecked")
    static RecipesManager get() {
        return Platform.get().get(ManagerComponent.class).manager(RecipesManager.class);
    }
}